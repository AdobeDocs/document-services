{"version":3,"sources":["webpack://dev-site-product-template/./src/@adobe/gatsby-theme-aio/components/TextBlock/index.js"],"names":["counter","alignMapping","mediaCSS","css","layoutColumns","TABLET_SCREEN_WIDTH","Icons","icons","isCentered","cloneElement","Texts","texts","Object","keys","filter","key","startsWith","map","textKey","Links","links","TextBlock","className","heading","buttons","image","video","theme","width","primaryOutline","headerElementType","imageOnly","imgWidth","props","Element","initColumns","parseFloat","toFixed","columns","useState","useEffect","blockWidth","extraMargin","classNames","replace","children","quiets","isReversed","slots","endsWith","DESKTOP_SCREEN_WIDTH"],"mappings":"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","file":"85506fab-45d763c145d350438f32.js","sourcesContent":["import React, { cloneElement, useEffect, useState } from \"react\";\nimport { css } from \"@emotion/react\";\nimport { HeroButtons } from \"@adobe/gatsby-theme-aio/src/components/Hero\";\nimport { Media } from \"@adobe/gatsby-theme-aio/src/components/Media\";\nimport PropTypes from \"prop-types\";\nimport {\n  layoutColumns,\n  DESKTOP_SCREEN_WIDTH,\n  TABLET_SCREEN_WIDTH,\n} from \"@adobe/gatsby-theme-aio/src/utils\";\nimport classNames from \"classnames\";\nimport \"@spectrum-css/typography\";\n\nconst counter = {\n  2: 0,\n  3: 0,\n  4: 0,\n};\nconst alignMapping = [\"margin-left: 0;\", \"margin-right: 0;\"];\n\nconst mediaCSS = css`\n  & {\n    display: inline;\n    width: ${layoutColumns(6)};\n    box-sizing: border-box;\n    padding: var(--spectrum-global-dimension-size-200);\n\n    @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n      display: block;\n      width: 100%;\n    }\n  }\n`;\n\nconst Icons = ({ icons, isCentered }) =>\n  icons\n    ? cloneElement(icons, {\n        css: css`\n          list-style: none;\n          padding: 0;\n          margin-bottom: var(--spectrum-global-dimension-size-400) !important;\n          display: flex;\n          justify-content: ${isCentered ? \"center\" : \"flex-start\"};\n\n          & li {\n            display: flex;\n            border-right: 1px solid var(--spectrum-global-color-gray-300);\n            height: var(--spectrum-global-dimension-size-600);\n            margin-right: var(--spectrum-global-dimension-size-150);\n          }\n\n          & li:last-of-type {\n            padding-right: 0;\n            border-right: none;\n          }\n\n          .gatsby-resp-image-wrapper {\n            position: relative;\n            width: var(--spectrum-global-dimension-size-800) !important;\n          }\n\n          .gatsby-resp-image-image {\n            position: absolute;\n            top: 0;\n            left: 0;\n            height: 100%;\n            object-fit: contain;\n          }\n        `,\n      })\n    : null;\n\nconst Texts = ({ texts }) => {\n  const textKeys = Object.keys(texts).filter((key) => key.startsWith(\"text\"));\n  return textKeys.map((textKey) => texts[textKey]);\n};\n\nconst Links = ({ links, isCentered }) =>\n  links\n    ? cloneElement(links, {\n        css: css`\n          list-style: none;\n          padding: 0;\n          display: flex;\n          justify-content: ${isCentered ? \"center\" : \"flex-start\"};\n          margin-top: ${isCentered\n            ? \"var(--spectrum-global-dimension-size-200) !important;\"\n            : \"var(--spectrum-global-dimension-size-600) !important;\"};\n\n          & li {\n            display: flex;\n            align-items: center;\n            height: var(--spectrum-global-dimension-size-400);\n          }\n\n          & li a {\n            white-space: nowrap;\n            margin-right: var(--spectrum-global-dimension-size-600);\n          }\n\n          & li:last-of-type a {\n            margin-right: 0;\n          }\n\n          .gatsby-resp-image-wrapper {\n            max-width: none !important;\n            width: 100% !important;\n            height: 100% !important;\n          }\n\n          .gatsby-resp-image-wrapper {\n            width: var(--spectrum-global-dimension-size-400) !important;\n            margin-left: 0 !important;\n            margin-right: var(--spectrum-global-dimension-size-150) !important;\n          }\n\n          .gatsby-resp-image-image {\n            object-fit: contain;\n          }\n\n          @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n            flex-direction: column;\n            align-items: ${isCentered ? \"center\" : \"left\"};\n\n            li {\n              margin-top: var(--spectrum-global-dimension-size-100);\n            }\n\n            li a {\n              margin-right: 0;\n            }\n          }\n        `,\n      })\n    : null;\n\nconst TextBlock = ({\n  className,\n  heading,\n  links,\n  buttons,\n  icons,\n  image,\n  video,\n  theme = \"lightest\",\n  width = \"100%\",\n  isCentered = false,\n  primaryOutline = false,\n  headerElementType = \"h3\",\n  imageOnly = false,\n  imgWidth = \"50%\",\n  ...props\n}) => {\n  const Element = headerElementType;\n\n  let initColumns = 100 / parseFloat(width);\n\n  if (width === \"33%\") {\n    width = `${(100 / 3).toFixed(2)}%`;\n    initColumns = 3;\n  }\n\n  const [columns] = useState(initColumns);\n\n  useEffect(() => {\n    return () => {\n      if (typeof counter[columns] !== \"undefined\") {\n        counter[columns]--;\n      }\n    };\n  }, [columns]);\n\n  if (width !== \"100%\") {\n    isCentered = true;\n  }\n\n  if (isCentered) {\n    let blockWidth = \"\";\n    let extraMargin = \"\";\n\n    if (typeof counter[columns] !== \"undefined\") {\n      counter[columns]++;\n    }\n\n    if (columns === 1) {\n      blockWidth = `max-width: ${layoutColumns(6)};`;\n    } else if (columns > 3) {\n      blockWidth = \"max-width: var(--spectrum-global-dimension-size-3600);\";\n    } else {\n      blockWidth = \"max-width: var(--spectrum-global-dimension-size-4600);\";\n      extraMargin = alignMapping[counter[columns] % columns];\n    }\n\n    return (\n      <>\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            display: table-cell;\n            width: ${width.replace(\"%\", \"vw\")};\n            background: var(--spectrum-global-color-gray-100);\n            padding: var(--spectrum-global-dimension-size-1000) 0;\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              display: block;\n              width: 100%;\n            }\n          `}\n        >\n          <div\n            css={css`\n              ${blockWidth}\n              padding: 0 var(--spectrum-global-dimension-size-400);\n              margin: auto;\n              ${extraMargin}\n\n              @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                max-width: none;\n                margin: auto;\n              }\n            `}\n          >\n            <Icons icons={icons} isCentered={isCentered} />\n\n            {image &&\n              cloneElement(image, {\n                css: css`\n                  height: var(--spectrum-global-dimension-size-1000);\n                  margin-top: 0;\n                  margin-bottom: var(--spectrum-global-dimension-size-300);\n\n                  .gatsby-resp-image-wrapper {\n                    position: relative;\n                    max-width: none !important;\n                    width: 100% !important;\n                    height: 100% !important;\n                  }\n\n                  .gatsby-resp-image-image {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    height: 100%;\n                    object-fit: contain;\n                  }\n                `,\n              })}\n\n            {heading && (\n              <Element\n                className=\"spectrum-Heading spectrum-Heading--sizeM\"\n                css={css`\n                  margin-bottom: var(\n                    --spectrum-global-dimension-size-200\n                  ) !important;\n\n                  & ~ p {\n                    margin-top: 0;\n                    margin-bottom: 0 !important;\n                  }\n                `}\n              >\n                {heading.props.children}\n              </Element>\n            )}\n\n            <Texts texts={props} />\n\n            <HeroButtons\n              buttons={buttons}\n              quiets={[true, !primaryOutline]}\n              css={css`\n                margin-top: var(--spectrum-global-dimension-size-150);\n                margin-bottom: var(--spectrum-global-dimension-size-150);\n                justify-content: center;\n              `}\n            />\n\n            <Links links={links} isCentered={isCentered} />\n\n            <Media css={mediaCSS} video={video} />\n          </div>\n        </section>\n        {width === \"100%\" ||\n        (typeof counter[columns] !== \"undefined\" &&\n          counter[columns] % columns === 0) ? (\n          <div aria-hidden=\"true\" />\n        ) : null}\n      </>\n    );\n  } else {\n    const isReversed =\n      props.slots.endsWith(\"image\") || props.slots.endsWith(\"video\");\n\n    return (\n      <section\n        className={classNames(className, `spectrum--${theme}`)}\n        css={css`\n          width: 100%;\n          background: var(--spectrum-global-color-gray-100);\n        `}\n      >\n        <div\n          css={css`\n            width: ${DESKTOP_SCREEN_WIDTH};\n            box-sizing: border-box;\n            margin: auto;\n            padding: var(--spectrum-global-dimension-size-1000) 0;\n\n            @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n              width: 100%;\n\n              & > div {\n                flex-direction: column !important;\n              }\n            }\n          `}\n        >\n          <div\n            css={css`\n              display: flex;\n              align-items: center;\n              flex-direction: ${imageOnly\n                ? \"column\"\n                : isReversed\n                ? \"row-reverse\"\n                : \"row\"};\n\n              @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                flex-direction: column;\n              }\n            `}\n          >\n            {image &&\n              cloneElement(image, {\n                css: css`\n                  display: flex;\n                  align-items: center;\n                  justify-content: center;\n                  width: ${imgWidth};\n                  height: calc(\n                    var(--spectrum-global-dimension-size-4600) -\n                      var(--spectrum-global-dimension-size-225)\n                  );\n                  box-sizing: border-box;\n                  padding: var(--spectrum-global-dimension-size-200);\n                  margin-top: 0;\n\n                  .gatsby-resp-image-wrapper {\n                    max-width: none !important;\n                    width: 100% !important;\n                    height: 100% !important;\n                  }\n\n                  .gatsby-resp-image-image {\n                    object-fit: contain;\n                  }\n\n                  @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                    height: auto;\n                    width: 100%;\n                  }\n                `,\n              })}\n\n            <Media css={mediaCSS} video={video} />\n\n            <div\n              css={css`\n                width: 50%;\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                text-align: left;\n                box-sizing: border-box;\n                padding: 0 var(--spectrum-global-dimension-size-400);\n\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  width: 100%;\n                  margin: var(--spectrum-global-dimension-size-400) 0;\n                }\n              `}\n            >\n              <Icons icons={icons} isCentered={isCentered} />\n\n              {heading && (\n                <Element\n                  className=\"spectrum-Heading spectrum-Heading--sizeM\"\n                  css={css`\n                    margin-top: 0 !important;\n                    margin-bottom: var(\n                      --spectrum-global-dimension-size-200\n                    ) !important;\n\n                    & + p {\n                      margin-top: 0 !important;\n                    }\n                  `}\n                >\n                  {heading.props.children}\n                </Element>\n              )}\n\n              <Texts texts={props} />\n\n              <HeroButtons\n                buttons={buttons}\n                quiets={[true, !primaryOutline]}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-200);\n                `}\n              />\n\n              <Links links={links} isCentered={isCentered} />\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n};\n\nTextBlock.propTypes = {\n  heading: PropTypes.element,\n  links: PropTypes.element,\n  icons: PropTypes.element,\n  buttons: PropTypes.element,\n  image: PropTypes.element,\n  video: PropTypes.element,\n  theme: PropTypes.string,\n  width: PropTypes.oneOf([\"100%\", \"50%\", \"33%\", \"25%\"]),\n  isCentered: PropTypes.bool,\n  headerElementType: PropTypes.oneOf([\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"]),\n  imageOnly: PropTypes.bool,\n  primaryOutline: PropTypes.bool,\n  imgWidth: PropTypes.string,\n};\n\nexport { TextBlock };\n"],"sourceRoot":""}