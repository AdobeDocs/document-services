{"version":3,"sources":["webpack://dev-site-product-template/./src/@adobe/gatsby-theme-aio/components/Tabs/index.js"],"names":["positionIndicator","indicator","selectedTab","current","style","transform","offsetLeft","width","offsetWidth","animateIndicator","animate","transition","setImageLoading","child","props","mdxType","cloneElement","loading","IconImage","image","styles","children","cloneChildren","css","Icons","icon","alt","Tabs","forwardRef","ref","orientation","density","isQuiet","className","onFontsReady","useEffect","document","fonts","ready","then","classNames","Item","elementType","isDisabled","isSelected","label","Element","role","disabled","TabItemIcon","Label","iconSize","setTabItemIcon","TabsIndicator","TabView","isHidden","hidden","TabsBlock","theme","tabs","useState","selectedTabIndicator","useRef","tab","selectedIndex","setSelectedIndex","menuItems","Object","keys","filter","key","startsWith","map","menu","_","index","heading","tabViewContent","positionSelectedTabIndicator","TABLET_SCREEN_WIDTH","layoutColumns","MOBILE_SCREEN_WIDTH","length","data","createRef","push","tabIndex","onClick"],"mappings":"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","file":"8bb409fd-6a71fffb9cbda07d096b.js","sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Once Tabs block PR will merged with Adobe theme after that we will remove this component\n\nimport React, { useEffect, useState, useRef, createRef, forwardRef, cloneElement } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from \"prop-types\";\nimport { css } from '@emotion/react';\nimport '@spectrum-css/tabs';\n\nimport { cloneChildren, MOBILE_SCREEN_WIDTH, TABLET_SCREEN_WIDTH, layoutColumns } from '@adobe/gatsby-theme-aio/src/utils';\n\nconst positionIndicator = (indicator, selectedTab) => {\n  indicator.current.style.transform = `translate(${selectedTab.current.offsetLeft}px, 0px)`;\n  indicator.current.style.width = `${selectedTab.current.offsetWidth}px`;\n};\n\nconst animateIndicator = (indicator, animate) => {\n  indicator.current.style.transition = animate ? '' : 'none';\n};\n\nconst setTabItemIcon = (child, className, iconSize) => {\n  if ( child?.props?.children?.props?.mdxType === \"img\") {\n    return <IconImage image={child} className={classNames(className, `spectrum-Icon--spectrum-icon-size-${iconSize}`)}/>;\n  }\n  return <Icons icon={child} className={classNames(className, `spectrum-Icon--spectrum-icon-size-${iconSize}`)}/>;\n};\n\nconst setImageLoading = (child) => {\n  if (child?.props?.mdxType === \"img\") {\n    return cloneElement(child, {\n      loading: \"eager\"\n    });\n  }\n  return child;\n};\n\nconst IconImage = ({ image = '', styles=''}) => {\n  return (image\n    ? cloneElement(image, {\n        children: cloneChildren(image.props.children, setImageLoading),\n        css: css`\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          height: 100%;\n          width: 100%;\n          margin-top: 0;\n\n          img {\n            display: block;\n            object-fit: contain;\n          }\n          ${styles}\n        `,\n      })\n    : null);\n  }\n\nconst Icons = ({ icon, styles }) => {\n  return(\n    icon\n      ? cloneElement(icon, {\n        alt:'',\n        css: css`\n          height: var(--spectrum-global-dimension-size-600);\n          width: var(--spectrum-global-dimension-size-600);\n          margin-top: 0;\n\n          img {\n            display: block;\n            object-fit: contain;\n          }\n          ${styles}\n        `\n      })\n      : null\n  )\n}\n\nconst Tabs = forwardRef(({\n  orientation='horizontal',\n  density='regular',\n  isQuiet = true,\n  children,\n  className,\n  onFontsReady,\n  ...props },\n  ref) => {\n\n  useEffect(() => {\n    // Font affects positioning of the Tab indicator\n    document.fonts.ready.then(() => {\n      onFontsReady && onFontsReady();\n    });\n  }, [onFontsReady]);\n\n  return (\n    <div\n      ref={ref}\n      {...props}\n      className={classNames(className, 'spectrum-Tabs', `spectrum-Tabs--${orientation}`, { 'spectrum-Tabs--quiet' : isQuiet }, { 'spectrum-Tabs--compact': density === 'compact' })}\n    >\n      {children}\n    </div>\n  );\n});\n\nconst Item = forwardRef(({\n  elementType = 'div',\n  isDisabled=false,\n  isSelected=false,\n  className,\n  children,\n  icon,\n  label,\n  ...props }, ref\n) => {\n  const Element = elementType;\n  return (\n    <Element\n      {...props}\n      ref={ref}\n      role=\"link\"\n      // aria-selected={isSelected ? true : false}\n      disabled={isDisabled ? true : false}\n      className={classNames(className, 'spectrum-Tabs-item', { 'is-selected': isSelected }, { 'is-disabled': isDisabled })}>\n      {icon ? <TabItemIcon icon={icon} isSelected={isSelected} isDisabled={isDisabled}></TabItemIcon> : null }\n      {label ? <Label> {label} </Label>: null}\n      {children}\n    </Element>\n  );\n});\n\nconst TabItemIcon = forwardRef(({\n  elementType = 'div',\n  icon,\n  isSelected,\n  isDisabled,\n  className,\n  children,\n  iconSize='xl',\n  ...props }, ref) => {\n  const Element = elementType;\n  return (\n    <Element\n      {...props}\n      ref={ref}\n      className={classNames(className, 'spectrum-Icon', { 'is-selected': isSelected }, { 'is-disabled ': isDisabled })}\n      css={css`\n        height: var(--spectrum-global-dimension-size-600);\n        width: var(--spectrum-global-dimension-size-550);\n        z-index: 1;\n      `}\n      >\n      {icon ? setTabItemIcon(icon, className, iconSize) : null}\n    </Element>\n  );\n});\n\nconst TabsIndicator = forwardRef(({ className, ...props }, ref) => {\n  return (\n    <div\n      {...props}\n      ref={ref}\n      className={classNames(className, 'spectrum-Tabs-selectionIndicator')}\n      css={css`\n      transition-property: transform, width;\n    `}></div>\n  );\n});\n\nconst Label = ({ children }) => <span className=\"spectrum-Tabs-itemLabel\">{children}</span>;\n\nconst TabView = forwardRef(({ elementType = 'div', isHidden, className, children, ...props }, ref) => {\n  const Element = elementType;\n  return (\n    <Element\n      {...props}\n      ref={ref}\n      hidden={isHidden}\n      className={classNames(className)}>\n      {children}\n    </Element>\n  );\n});\n\nconst TabsBlock = ({\n  theme='light',\n  orientation='horizontal',\n  className,\n  ...props\n}) => {\n\n  const [tabs] = useState([]);\n  const selectedTabIndicator = useRef(null);\n   const [selectedIndex, setSelectedIndex] = useState({\n    tab: 0,\n  });\n\n  const propKeys = Object.keys(props);\n  let filteredMenuProps = propKeys.filter((key) => key.startsWith(\"heading\")).map(menu=>menu);\n\n  let menuItems = filteredMenuProps.map((_, index) => {\n    return {\n      heading: props?.[`heading${index}`]?.props?.children || props?.[`heading`],\n      tabViewContent: props?.[`tabViewContent${index}`] ||  props?.[`tabViewContent`],\n      image: props?.[`image${index}`] || props?.[`image`]\n    };\n  });\n\n  const positionSelectedTabIndicator = (index = selectedIndex.tab) => {\n    const selectedTab = tabs.filter((tab) => tab?.current)[index];\n    positionIndicator(selectedTabIndicator, selectedTab);\n  };\n\n  return (\n    <section\n      className={classNames(className, `tabsBlock spectrum--${theme}`)}\n      css={css`\n        background: var(--spectrum-global-color-gray-100);\n        max-width: 100%;\n        margin:0;\n        padding-bottom: 7.5rem;\n      `}\n      >\n      <div\n        css={css`\n        display: ${orientation === 'vertical' ? 'inline-flex': ''};\n          @media only screen and (min-width: ${TABLET_SCREEN_WIDTH}) {\n            max-width: 1280px;\n            margin: 0 auto !important\n          }\n          @media only screen and (max-width: 480px) {\n            flex-direction: column;\n          }\n        `}\n      >\n        <div\n          css={css`\n            display: ${orientation === 'vertical' ? 'grid': 'initial'};\n            position: relative;\n            grid-template-columns: 300px calc(100% - 300px);\n            margin-top: 1.5rem;\n            width:${layoutColumns(12)} !important;\n            @media only screen and (max-width: 480px) {\n              display: initial !important;\n              width:${layoutColumns(2.5)} !important;\n            }\n            @media only screen and (device-width: ${MOBILE_SCREEN_WIDTH}) {\n              width:${layoutColumns(6.4)} !important;\n            }\n            @media only screen and (device-width: ${TABLET_SCREEN_WIDTH}) {\n              width:${layoutColumns(8)} !important;\n            }\n          `}\n        >\n          {menuItems?.length > 0 ?\n            <Tabs\n              orientation={orientation}\n              isQuiet={true}\n              onFontsReady={positionSelectedTabIndicator}\n            >\n              {menuItems.map((data, index) => {\n                const ref = createRef();\n                tabs.push(ref);\n                const isSelected = selectedIndex.tab === index;\n                return (\n                  <Item\n                    className={\"tabItem\"}\n                    key={`tabItem_${index}`}\n                    tabIndex={0}\n                    ref={ref}\n                    isSelected={isSelected}\n                    label={<b>{data['heading']}</b>}\n                    icon={data['image']}\n                    onClick={() => {\n                      setSelectedIndex({\n                        tab: index,\n                      });\n                      positionSelectedTabIndicator(index);\n                    }}\n                    css={css`\n                      text-align: left;\n                      white-space: normal;\n                      width: 260px !important;\n                      font-size: 1rem;\n                      margin-bottom: ${orientation === 'vertical' ? '2.4rem !important' : '0rem'};\n                      display: flex !important;\n                      padding: 0.625rem !important;\n                      height: auto !important;\n                      line-height: initial;\n\n                      .spectrum-Tabs-itemLabel{\n                        margin-top:5px;\n                        margin-bottom:5px;\n                      }\n                      .spectrum-Icon{\n                        background-size: 18px 21px;\n                        width: 40px;\n                        height: 30px;\n                      }\n\n                      &.is-disabled {\n                        pointer-events:none;\n                      }\n                      &::before {\n                        left:0px !important;\n                        right:0px !important;\n                      }\n                      @media only screen and (max-width: 480px) {\n                        margin-top:2px !important;\n                        margin-bottom:2px !important;\n                      }\n                      @media only screen and (min-width: ${TABLET_SCREEN_WIDTH}) {\n                        left: var(--spectrum-global-dimension-size-250) !important;\n                      }\n                    `}\n                  />\n                )\n              })}\n              <TabsIndicator ref={selectedTabIndicator} />\n            </Tabs>\n          : null}\n          {menuItems?.length > 0 ?\n            menuItems.map((data, index) => {\n              const isHidden = selectedIndex.tab === index;\n              return(\n                <TabView\n                  key={`tabView_${index}`}\n                  className={\"tabView\"}\n                  isHidden={!isHidden}\n                  css={css`\n                    text-align: left;\n                    max-width: ${layoutColumns(8.5)} !important;\n                    @media only screen and (max-width: 480px) {\n                      padding-left: inherit !important;\n                      max-width: ${layoutColumns(3)} !important;\n                    }\n\n                    @media only screen and (device-width: ${MOBILE_SCREEN_WIDTH}) {\n                      max-width: ${layoutColumns(3.5)} !important;\n                    }\n                    @media only screen and (device-width: ${TABLET_SCREEN_WIDTH}) {\n                      max-width: ${layoutColumns(6.5)} !important;\n                      padding-left:var(--spectrum-global-dimension-size-500);\n                    }\n\n                  `}\n                >\n                  {data['tabViewContent'] ? data['tabViewContent'] : null}\n                </TabView>\n              )\n            })\n          : null}\n        </div>\n      </div>\n    </section>\n  )\n}\n\n\nTabs.propTypes = {\n  orientation: PropTypes.oneOf([\"horizontal\", \"vertical\"]),\n  density: PropTypes.oneOf([\"regular\", \"compact\"]),\n  isQuiet: PropTypes.boolean,\n  className: PropTypes.string,\n};\n\nItem.propTypes = {\n  isSelected: PropTypes.boolean,\n  isDisabled: PropTypes.boolean,\n  className: PropTypes.string,\n  icon: PropTypes.element,\n  label: PropTypes.object\n};\n\nTabItemIcon.propTypes = {\n  elementType: PropTypes.string,\n  icon: PropTypes.element,\n  isSelected: PropTypes.boolean,\n  isDisabled: PropTypes.boolean,\n  iconSize: PropTypes.string,\n  className: PropTypes.string\n};\n\nTabView.propTypes = {\n  isHidden: PropTypes.boolean,\n  className: PropTypes.string\n};\n\nTabsBlock.propTypes = {\n  theme: PropTypes.oneOf([\"light\", \"dark\", \"lightest\"]),\n  orientation: PropTypes.oneOf([\"horizontal\", \"vertical\"]),\n  heading: PropTypes.string,\n  tabViewContent: PropTypes.string,\n  image: PropTypes.string,\n  className: PropTypes.string\n};\n\n\nexport { Tabs, Item, TabView, TabItemIcon, Label, TabsIndicator, positionIndicator, animateIndicator, TabsBlock };\n"],"sourceRoot":""}