{"version":3,"sources":["webpack://dev-site-product-template/./src/@adobe/gatsby-theme-aio/components/Hero/index.js"],"names":["setImageLoading","child","props","mdxType","cloneElement","loading","HeroButtons","buttons","variants","quiets","className","css","Children","children","item","i","variant","quiet","link","getElementChild","key","A","isQuiet","href","HeroImage","image","styles","cloneChildren","HeroTexts","texts","Object","keys","filter","startsWith","map","textKey","HeroHeading","heading","customLayout","originalType","HeroAssets","TABLET_SCREEN_WIDTH","Hero","background","theme","icon","assets","containerHeight","width","DESKTOP_SCREEN_WIDTH","useContext","Context","siteMetadata","location","home","pages","pathWithRootFix","rootFix","pathname","pagesWithRootFix","rootFixPages","selectedTopPage","findSelectedTopPage","selectedTopPageMenu","findSelectedTopPageMenu","classNames","MOBILE_SCREEN_WIDTH","hidden","title","DEFAULT_HOME","withPrefix","height","isVariant"],"mappings":"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","file":"03d90930-ca4968fcaf46ee5464d0.js","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { cloneElement, Children, useContext } from \"react\";\nimport { withPrefix } from \"gatsby\";\nimport { css } from \"@emotion/react\";\nimport { AnchorButton } from \"@adobe/gatsby-theme-aio/src/components/AnchorButton\";\nimport \"@spectrum-css/typography\";\nimport PropTypes from \"prop-types\";\nimport {\n  getElementChild,\n  cloneChildren,\n  DESKTOP_SCREEN_WIDTH,\n  TABLET_SCREEN_WIDTH,\n  MOBILE_SCREEN_WIDTH,\n  DEFAULT_HOME,\n  findSelectedTopPage,\n  rootFixPages,\n  rootFix,\n  findSelectedTopPageMenu,\n} from \"@adobe/gatsby-theme-aio/src/utils\";\n\nimport Context from \"@adobe/gatsby-theme-aio/src/components/Context\";\nimport { Breadcrumbs } from \"@adobe/gatsby-theme-aio/src/components/Breadcrumbs\";\nimport classNames from \"classnames\";\n\nconst setImageLoading = (child) => {\n  if (child?.props?.mdxType === 'img') {\n    return cloneElement(child, {\n      loading: 'eager'\n    });\n  }\n\n  return child;\n};\n\nconst HeroButtons = ({ buttons, variants = ['cta', 'primary'], quiets = [true, true], className }) =>\n  buttons ? (\n    <div>\n      <div\n        className={className}\n        css={css`\n          display: flex;\n          flex-wrap: wrap;\n          gap: var(--spectrum-global-dimension-size-200);\n        `}>\n        {Children.map(buttons.props.children, (item, i) => {\n          let variant = variants[0];\n          let quiet = quiets[0];\n\n          if (i > 0) {\n            variant = variants[1];\n            quiet = quiets[1];\n          }\n\n          const link = getElementChild(item);\n\n          return (\n            <div key={i}>\n              <AnchorButton isQuiet={quiet} href={link.props.href} variant={variant}>\n                {link.props.children}\n              </AnchorButton>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  ) : null;\n\nconst HeroImage = ({ image, styles }) =>\n  image\n    ? cloneElement(image, {\n      children: cloneChildren(image.props.children, setImageLoading),\n      css: css`\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          height: 100%;\n          width: 100%;\n          margin-top: 0;\n          ${styles}\n\n          .gatsby-resp-image-wrapper {\n            max-width: none !important;\n            width: 100% !important;\n            height: 100% !important;\n          }\n\n          .gatsby-resp-image-image {\n            object-fit: cover;\n          }\n        `\n    })\n    : null;\n\nconst HeroTexts = ({ texts }) => {\n  const textKeys = Object.keys(texts).filter((key) => key.startsWith('text'));\n  return textKeys.map((textKey) =>\n    cloneElement(texts[textKey], {\n      className: 'spectrum-Body spectrum-Body--sizeL',\n      css: css`\n        &.spectrum-Body--sizeL {\n          margin-top: 0 !important;\n\n          &:last-of-type {\n            margin-bottom: 0 !important;\n          }\n        }\n      `\n    })\n  );\n};\n\nconst HeroHeading = ({ heading, variant, customLayout }) =>\n  heading\n    ? cloneElement(heading, {\n      // force h1 to support gdocs\n      mdxType: 'h1',\n      originalType: 'h1',\n      className:\n        (variant === 'default' || customLayout) ? customLayout ? 'spectrum-Heading--sizeXL spectrum-Heading--serif' : 'spectrum-Heading--sizeXL' : 'spectrum-Heading--sizeXXL spectrum-Heading--serif',\n      css: css`\n          margin-top: 0;\n          margin-bottom: var(--spectrum-global-dimension-size-200);\n\n          & + p {\n            margin-bottom: var(--spectrum-global-dimension-size-200);\n          }\n        `\n    })\n    : null;\n\nconst HeroAssets = ({ image }) =>\n  image\n    ? cloneElement(image, {\n      children: cloneChildren(image.props.children, setImageLoading),\n      css: css`\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 100%;\n          height: 70%;\n          box-sizing: border-box;\n          margin-top: 0;\n          padding-top:var(--spectrum-global-dimension-size-200);\n          margin-bottom: 0;\n          .gatsby-resp-image-wrapper {\n            max-width: none !important;\n            width: 100% !important;\n            height: 100% !important;\n          }\n\n          .gatsby-resp-image-image {\n            object-fit: contain;\n          }\n\n          @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n            height: auto;\n            width: 100%;\n          }\n        `,\n    })\n    : null;\n\nconst Hero = ({\n  className,\n  background,\n  theme = 'dark',\n  heading,\n  image,\n  icon,\n  buttons,\n  assets,\n  variant = 'default',\n  containerHeight = 1000,\n  width = DESKTOP_SCREEN_WIDTH,\n  customLayout = false,\n  ...props\n}) => {\n  const { siteMetadata, location } = useContext(Context);\n  if (!variant || variant === 'default') {\n    const { home, pages } = siteMetadata;\n    const pathWithRootFix = rootFix(location.pathname);\n    const pagesWithRootFix = rootFixPages(pages);\n    const selectedTopPage = findSelectedTopPage(pathWithRootFix, pagesWithRootFix);\n    const selectedTopPageMenu = findSelectedTopPageMenu(pathWithRootFix, selectedTopPage);\n\n    return (\n      <section\n        className={classNames(className, `spectrum--${theme}`)}\n        css={css`\n          position: relative;\n          height: var(--spectrum-global-dimension-size-3400);\n          margin-bottom: var(--spectrum-global-dimension-size-400);\n          background-color: ${background ?? 'rgb( 29, 125, 238)'};\n          width: 100%;\n          display: flex;\n\n          @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n            overflow: auto;\n          }\n\n          @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n            height: calc(100vh - var(--spectrum-global-dimension-size-1200));\n          }\n        `}>\n        <HeroImage image={image} styles={`position: absolute;`} />\n        <div\n          css={css`\n            margin: auto;\n            display: flex;\n            position: relative;\n            height: 100%;\n            max-width: ${width};\n            flex-direction: row;\n            width: 100%;\n            align-items: center;\n\n            & > p {\n              margin-top: 0 !important;\n            }\n          `}>\n          <div\n            css={css`\n              width: calc(5 * 100% / 12);\n              position: absolute;\n              display: flex;\n              flex-direction: column;\n\n              & > p {\n                margin-top: var(--spectrum-global-dimension-size-225) !important;\n                margin-bottom: 0 !important;\n              }\n\n              @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n                width: auto;\n                padding: 0 var(--spectrum-global-dimension-size-400);\n              }\n            `}>\n            {home?.hidden !== true && home?.title && home?.href && selectedTopPage && (\n              <Breadcrumbs\n                pages={[\n                  DEFAULT_HOME,\n                  home,\n                  { ...selectedTopPage, href: withPrefix(selectedTopPage.href) },\n                  selectedTopPageMenu && { ...selectedTopPageMenu, href: withPrefix(selectedTopPageMenu.href) }\n                ]}\n              />\n            )}\n\n            <HeroHeading heading={heading} variant={variant} />\n\n            <HeroTexts texts={props} />\n          </div>\n        </div>\n      </section>\n    );\n  } else {\n    const height = 'calc(var(--spectrum-global-dimension-size-6000) + var(--spectrum-global-dimension-size-1800))';\n    if (variant === 'fullwidth' && customLayout) {\n      return (\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            width: 100%;\n            background: ${background ?? \"var(--spectrum-global-color-gray-50)\"};\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              overflow: auto;\n            }\n\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n\n              .spectrum-Heading--sizeXL {\n                font-size: var(--spectrum-alias-heading-l-text-size);\n              }\n            }\n          `}\n        >\n          <HeroImage image={image} />\n\n          <div\n            css={css`\n              height: 100%;\n              top: 0;\n              bottom: 0;\n              width: 100%;\n              box-sizing: border-box;\n              padding: 0;\n\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n              justify-content: flex-end;\n              text-align: center;\n\n              h1 {\n                padding: var(--spectrum-global-dimension-size-500) var(--spectrum-global-dimension-size-300) var(--spectrum-global-dimension-size-0) !important;\n              }\n\n              @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                padding: 0 var(--spectrum-global-dimension-size-250);\n\n                h1 {\n                  padding: var(--spectrum-global-dimension-size-400) var(--spectrum-global-dimension-size-200) var(--spectrum-global-dimension-size-0) !important;\n                }\n              }\n\n\n            `}\n          >\n            {heading && (\n              <HeroHeading\n                heading={heading}\n                variant={variant}\n                customLayout={customLayout}\n              />\n            )}\n\n            <HeroTexts texts={props} />\n\n            {buttons ? (\n              <HeroButtons\n                buttons={buttons}\n                variants={[\"cta\", \"overBackground\"]}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-200);\n                  margin-bottom: var(--spectrum-global-dimension-size-200);\n                `}\n              />\n            ) : (\n              <div\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-200);\n                `}\n              />\n            )}\n            <HeroAssets image={assets} />\n          </div>\n        </section>\n      )\n    } else if (variant === 'fullwidth') {\n      return (\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            position: relative;\n            width: 100%;\n            height: ${height};\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              overflow: auto;\n            }\n\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              height: 100vh;\n\n              .spectrum-Heading--sizeXXL {\n                font-size: var(--spectrum-alias-heading-xl-text-size);\n              }\n            }\n          `}>\n          <HeroImage image={image} />\n\n          <div\n            css={css`\n              height: 100%;\n              position: absolute;\n              top: 0;\n              width: 100%;\n              box-sizing: border-box;\n              padding: 0 calc(var(--spectrum-global-dimension-size-3600) + var(--spectrum-global-dimension-size-125));\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n              justify-content: center;\n              text-align: center;\n\n              @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                padding: 0 var(--spectrum-global-dimension-size-400);\n              }\n            `}>\n            <HeroHeading heading={heading} variant={variant} />\n\n            <HeroTexts texts={props} />\n\n            <HeroButtons\n              buttons={buttons}\n              variants={['cta', 'overBackground']}\n              css={css`\n                margin-top: var(--spectrum-global-dimension-size-400);\n              `}\n            />\n          </div>\n        </section>\n      );\n    } else if (variant === 'halfwidth') {\n      return (\n        <section\n          className={classNames(className, `spectrum--lightest`)}\n          css={css`\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n            width: 100%;\n            height: ${height};\n            overflow: hidden;\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-400);\n              box-sizing: border-box;\n            }\n          `}>\n          <div\n            css={css`\n              display: flex;\n              height: 100%;\n              justify-content: center;\n            `}>\n            <div\n              css={css`\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                width: calc(5 * 100% / 12);\n                margin-left: var(--spectrum-global-dimension-size-800);\n                margin-right: var(--spectrum-global-dimension-size-400);\n\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  width: 100%;\n                  margin: 0;\n                }\n              `}>\n              {icon &&\n                cloneElement(icon, {\n                  children: cloneChildren(icon.props.children, setImageLoading),\n                  css: css`\n                    height: var(--spectrum-global-dimension-size-600);\n                    width: var(--spectrum-global-dimension-size-600);\n                    margin-top: 0 !important;\n                    margin-bottom: var(--spectrum-global-dimension-size-300) !important;\n\n                    .gatsby-resp-image-wrapper {\n                      max-width: none !important;\n                      width: 100% !important;\n                      height: 100% !important;\n                    }\n\n                    .gatsby-resp-image-image {\n                      height: 100%;\n                      object-fit: contain;\n                    }\n                  `\n                })}\n\n              <HeroHeading heading={heading} isVariant />\n\n              <HeroTexts texts={props} />\n\n              <HeroButtons\n                buttons={buttons}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-400);\n                `}\n              />\n            </div>\n            <div\n              css={css`\n                flex: 1;\n\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  display: none;\n                }\n              `}>\n              <HeroImage image={image} />\n            </div>\n          </div>\n        </section>\n      );\n    }\n  }\n};\n\nHero.propTypes = {\n  background: PropTypes.string,\n  heading: PropTypes.element,\n  text: PropTypes.element,\n  image: PropTypes.element,\n  icon: PropTypes.element,\n  buttons: PropTypes.element,\n  variant: PropTypes.string,\n  width: PropTypes.string,\n  theme: PropTypes.string,\n  customLayout: PropTypes.bool\n};\n\nHeroButtons.propTypes = {\n  buttons: PropTypes.element,\n  variants: PropTypes.array,\n  quiets: PropTypes.array\n};\n\nHeroImage.propTypes = {\n  image: PropTypes.element\n};\n\nexport { Hero, HeroImage, HeroButtons };\n"],"sourceRoot":""}