{"version":3,"sources":["webpack://dev-site-product-template/./src/@adobe/gatsby-theme-aio/components/Tabs/index.js"],"names":["positionIndicator","indicator","selectedTab","current","style","transform","offsetLeft","width","offsetWidth","animateIndicator","animate","transition","mobileMinWidth","setImageLoading","child","props","mdxType","cloneElement","loading","IconImage","image","styles","children","cloneChildren","css","Icons","icon","alt","Tabs","forwardRef","ref","orientation","density","isQuiet","className","onFontsReady","useEffect","document","fonts","ready","then","role","classNames","Item","elementType","isDisabled","isSelected","label","Element","title","disabled","TabItemIcon","Label","iconSize","setTabItemIcon","TabsIndicator","CodeTabIndicator","index","TabView","isHidden","hidden","TabsBlock","theme","APIReference","tabs","useState","selectedTabIndicator","useRef","tab","selectedIndex","setSelectedIndex","menuItems","Object","keys","filter","key","startsWith","map","menu","_","heading","content","positionSelectedTabIndicator","handleOnChange","TABLET_SCREEN_WIDTH","MOBILE_SCREEN_WIDTH","DESKTOP_SCREEN_WIDTH","layoutColumns","length","data","createRef","push","tabIndex","onKeyDown","e","currentTarget","nextSibling","focus","previousSibling","onFocus","onClick","href","target","rel","contentData","id"],"mappings":"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","file":"8bb409fd-793ae9bdd272fb92b7ff.js","sourcesContent":["import React, { useEffect, useState, useRef, createRef, forwardRef, cloneElement } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { css } from '@emotion/react';\n// import nextId from 'react-id-generator';\nimport '@spectrum-css/tabs';\n\nimport { cloneChildren, MOBILE_SCREEN_WIDTH, TABLET_SCREEN_WIDTH, layoutColumns } from '@adobe/gatsby-theme-aio/src/utils';\n\nimport {  DESKTOP_SCREEN_WIDTH } from \"../../../../utils\";\n\nconst positionIndicator = (indicator, selectedTab) => {\n  indicator.current.style.transform = `translate(${selectedTab.current.offsetLeft}px, 0px)`;\n  indicator.current.style.width = `${selectedTab.current.offsetWidth}px`;\n};\n\nconst animateIndicator = (indicator, animate) => {\n  indicator.current.style.transition = animate ? '' : 'none';\n};\n\nconst setTabItemIcon = (child, className, iconSize) => {\n  if ( child?.props?.children?.props?.mdxType === 'img') {\n    return <IconImage image={child} className={classNames(className, `spectrum-Icon--spectrum-icon-size-${iconSize}`)}/>;\n  }\n  return <Icons icon={child} className={classNames(className, `spectrum-Icon--spectrum-icon-size-${iconSize}`)}/>;\n};\n\nconst mobileMinWidth = '480px';\nconst MAX_MOBILE_SCREEN_WIDTH = '767px';\n\nconst setImageLoading = (child) => {\n  if (child?.props?.mdxType === 'img') {\n    return cloneElement(child, {\n      loading: 'eager'\n    });\n  }\n  return child;\n};\n\nconst IconImage = ({ image = '', styles=''}) => {\n  return (image\n    ? cloneElement(image, {\n        children: cloneChildren(image.props.children, setImageLoading),\n        css: css`\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          height: 100%;\n          width: 100%;\n          margin-top: var(--spectrum-global-dimension-size-0);\n\n          img {\n            display: block;\n            object-fit: contain;\n          }\n          ${styles}\n        `,\n      })\n    : null);\n  }\n\nconst Icons = ({ icon, styles }) => {\n  return(\n    icon\n      ? cloneElement(icon, {\n        alt:'',\n        css: css`\n          height: var(--spectrum-global-dimension-size-600);\n          width: var(--spectrum-global-dimension-size-600);\n          margin-top: var(--spectrum-global-dimension-size-0);\n\n          img {\n            display: block;\n            object-fit: contain;\n          }\n          ${styles}\n        `\n      })\n      : null\n  )\n}\n\nconst Tabs = forwardRef(({\n  orientation='horizontal',\n  density='regular',\n  isQuiet = true,\n  children,\n  className,\n  onFontsReady,\n  ...props },\n  ref) => {\n\n  useEffect(() => {\n    // Font affects positioning of the Tab indicator\n    document.fonts.ready.then(() => {\n      onFontsReady && onFontsReady();\n    });\n  }, [onFontsReady]);\n\n  return (\n    <div\n      ref={ref}\n      {...props}\n      role='tablist'\n      aria-orientation={orientation}\n      className={classNames(className, 'spectrum-Tabs', `spectrum-Tabs--${orientation}`, { 'spectrum-Tabs--quiet' : isQuiet }, { 'spectrum-Tabs--compact': density === 'compact' })}\n    >\n      {children}\n    </div>\n  );\n});\n\nconst Item = forwardRef(({\n  elementType = 'div',\n  isDisabled=false,\n  isSelected=false,\n  className,\n  children,\n  icon,\n  label,\n  ...props }, ref\n) => {\n  const Element = elementType;\n  // const id = nextId();\n  return (\n    <Element\n      {...props}\n      ref={ref}\n      role='tab'\n      title={label?.props?.children}\n      aria-selected={isSelected}\n      disabled={isDisabled}\n      className={classNames(className, 'spectrum-Tabs-item', { 'is-selected': isSelected }, { 'is-disabled': isDisabled })}>\n      {icon ? <TabItemIcon icon={icon} isSelected={isSelected} isDisabled={isDisabled}></TabItemIcon> : null }\n      {label ? <Label> {label} </Label>: null}\n      {children}\n    </Element>\n  );\n});\n\nconst TabItemIcon = forwardRef(({\n  elementType = 'div',\n  icon,\n  isSelected,\n  isDisabled,\n  className,\n  children,\n  iconSize='xl',\n  ...props }, ref) => {\n  const Element = elementType;\n  return (\n    <Element\n      {...props}\n      ref={ref}\n      className={classNames(className, 'spectrum-Icon', { 'is-selected': isSelected }, { 'is-disabled ': isDisabled })}\n      css={css`\n        height: var(--spectrum-global-dimension-size-600);\n        width: var(--spectrum-global-dimension-size-550);\n        z-index: 1;\n      `}\n      >\n      {icon ? setTabItemIcon(icon, className, iconSize) : null}\n    </Element>\n  );\n});\n\nconst TabsIndicator = forwardRef(({ className, ...props }, ref) => {\n  return (\n    <div\n      {...props}\n      ref={ref}\n      className={classNames(className, 'spectrum-Tabs-selectionIndicator')}\n      css={css`\n      transition-property: transform, width;\n    `}></div>\n  );\n});\n\nconst CodeTabIndicator = forwardRef(({ className,index=0, ...props }, ref) => {\n  return (\n    <div\n      {...props}\n      ref={ref}\n      className={classNames(className, 'spectrum-Tabs-selectionIndicator',{\"default\":index ===0})}\n      css={css`\n      transition-property: transform, width;\n    `}></div>\n  );\n});\n\nconst Label = ({ children }) => <span className='spectrum-Tabs-itemLabel'>{children}</span>;\n\nconst TabView = forwardRef(({ elementType = 'div', isHidden, className, children, ...props }, ref) => {\n  const Element = elementType;\n  return (\n    <Element\n      {...props}\n      ref={ref}\n      hidden={isHidden}\n      className={classNames(className)}>\n      {children}\n    </Element>\n  );\n});\n\nconst TabsBlock = ({\n  theme='light',\n  orientation='horizontal',\n  className,\n  APIReference = \"\",\n  ...props\n}) => {\n\n  const [tabs] = useState([]);\n  const selectedTabIndicator = useRef(null);\n   const [selectedIndex, setSelectedIndex] = useState({\n    tab: 0\n  });\n\n  const propKeys = Object.keys(props);\n  let filteredMenuProps = propKeys.filter((key) => key.startsWith('heading')).map(menu=>menu);\n\n  let menuItems = filteredMenuProps.map((_, index) => {\n    return {\n      heading: props?.[`heading${index}`]?.props?.children || props?.[`heading`],\n      content: props?.[`content${index}`] ||  props?.[`content`],\n      image: props?.[`image${index}`] || props?.[`image`]\n    };\n  });\n\n  const positionSelectedTabIndicator = (index = selectedIndex.tab) => {\n    const selectedTab = tabs.filter((tab) => tab?.current)[index];\n    positionIndicator(selectedTabIndicator, selectedTab);\n  };\n\n  const handleOnChange = (index) => {\n    setSelectedIndex({\n      tab: index,\n    });\n    positionSelectedTabIndicator(index);\n  };\n\n\n\n  return (\n    <section\n      className={classNames(className, `tabsBlock spectrum--${theme}`)}\n      css={css`\n        background: var(--spectrum-global-color-gray-100);\n        max-width: 100%;\n        overflow-x:hidden !important;\n        margin: 0;\n        padding-bottom: calc(var(--spectrum-global-dimension-size-1250) + var(--spectrum-global-dimension-size-250));\n      `}\n      >\n      <div\n        className=\"tabs-wrapper\"\n        css={css`\n        display: ${orientation === 'vertical' ? 'inline-flex': ''};\n\n          @media only screen and (min-width: ${TABLET_SCREEN_WIDTH}) {\n            margin: 0 auto !important\n          }\n\n          @media screen and (max-device-width: ${MOBILE_SCREEN_WIDTH}) {\n            flex-direction: column;\n            // width:100%;\n          }\n        `}\n      >\n        <div\n          className=\"tabs-content\"\n          css={css`\n            display: ${orientation === 'vertical' ? 'grid': 'initial'};\n            position: relative;\n            grid-template-columns: 300px calc(100% - 300px);\n            margin-top: var(--spectrum-global-dimension-size-300);\n            // width:${layoutColumns(12)} !important;\n            width:${DESKTOP_SCREEN_WIDTH} !important;\n\n            @media only screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              // display: initial !important;\n              width: 100% !important;\n            }\n\n            @media only screen and (device-width: ${TABLET_SCREEN_WIDTH}) {\n              width:${layoutColumns(8)} !important;\n            }\n          `}\n        >\n          {menuItems?.length > 0 ?\n            <Tabs\n              orientation={orientation}\n              isQuiet={true}\n              onFontsReady={positionSelectedTabIndicator}\n            >\n              {menuItems.map((data, index) => {\n                const ref = createRef();\n                tabs.push(ref);\n                const isSelected = selectedIndex.tab === index;\n                return (\n                  <>\n                  <Item\n                    className={'tabItem'}\n                    key={`tabItem_${index}`}\n                    tabIndex={0}\n                    ref={ref}\n                    isSelected={isSelected}\n                    aria-controls={`tabView${index}`}\n                    aria-label={data['heading']}\n                    label={<b>{data['heading']}</b>}\n                    icon={data['image']}\n                    onKeyDown={(e) => {\n                      if (e.key === 'ArrowDown' || e.key === 'Enter') {\n                        e.currentTarget.nextSibling && e.currentTarget.nextSibling.nextSibling.focus();\n                      }\n                      if (e.key === 'ArrowUp') {\n                        e.currentTarget.previousSibling && e.currentTarget.previousSibling.previousSibling.focus();\n                      }\n                    }}\n                    onFocus={() => {\n                      handleOnChange(index);\n                    }}\n                    onClick={() => {\n                      handleOnChange(index);\n                    }}\n\n                    css={css`\n                      text-align: left;\n                      white-space: normal;\n                      width: calc(var(--spectrum-global-dimension-size-2000) + var(--spectrum-global-dimension-size-600)) !important;\n                      font-size: var(--spectrum-global-dimension-size-200);\n                      margin-bottom: ${orientation === 'vertical' ? '1rem !important' : '0rem'};\n                      display: flex !important;\n                      padding: var(--spectrum-global-dimension-size-125) !important;\n                      height: auto !important;\n                      line-height: initial;\n\n                      .spectrum-Tabs-itemLabel{\n                        margin-top:5px;\n                        margin-bottom:5px;\n                      }\n                      .spectrum-Icon{\n                        background-size: var(--spectrum-global-dimension-size-225) var(--spectrum-global-dimension-size-275);\n                        width: var(--spectrum-global-dimension-size-500);\n                        height: var(--spectrum-global-dimension-size-400);\n                      }\n\n                      &.is-disabled {\n                        pointer-events:none;\n                      }\n                      &::before {\n                        left: var(--spectrum-global-dimension-size-0) !important;\n                        right: var(--spectrum-global-dimension-size-0) !important;\n                        border:none !important;\n                      }\n\n                      @media only screen and (max-width: ${mobileMinWidth}) {\n                        margin-top:var(--spectrum-global-dimension-size-25) !important;\n                        margin-bottom:var(--spectrum-global-dimension-size-25) !important;\n                      }\n\n                      @media only screen and (min-width: ${MOBILE_SCREEN_WIDTH}) {\n                        padding-left: var(--spectrum-global-dimension-size-0) !important;\n                      }\n                      @media only screen and (min-width: ${TABLET_SCREEN_WIDTH}) {\n                        width: calc(var(--spectrum-global-dimension-size-2000) + var(--spectrum-global-dimension-size-750)) !important;\n                        left: var(--spectrum-global-dimension-size-250) !important;\n                      }\n                    `}\n                  >\n                  </Item>\n                    <div\n                      key={`mobileTabView_${index}`}\n                      className=\"mobileTabView\"\n                      hidden={!isSelected}\n                      css={css`\n                        display: none;\n                        padding: var(--spectrum-global-dimension-size-0) !important;\n                        h3 {\n                          font-size:var(--spectrum-heading-s-text-size, var(--spectrum-alias-heading-s-text-size));\n                        }\n                        p {\n                          font-size: var(--spectrum-body-s-text-size, var(--spectrum-global-dimension-font-size-150))\n                        }\n                        @media only screen and (max-width: ${MAX_MOBILE_SCREEN_WIDTH}) {\n                          display: block;\n                        }\n                      `}\n                    >\n                      {data['content'] ? data['content'] : null}\n                    </div>\n                  </>\n                )\n              })}\n              <TabsIndicator ref={selectedTabIndicator} />\n              {APIReference !== \"\" && (\n                <div\n                  css={css`\n                    text-align: left;\n                    white-space: normal;\n                    width: calc(var(--spectrum-global-dimension-size-2500) + var(--spectrum-global-dimension-size-750)) !important;\n                    font-size: var(--spectrum-global-dimension-size-200);\n                    padding: var(--spectrum-global-dimension-size-125) !important;\n\n                    @media only screen and (max-width: ${mobileMinWidth}) {\n                      left: var(--spectrum-global-dimension-size-100) !important;\n                      margin-top: var(--spectrum-global-dimension-size-125) !important;\n                      margin-bottom: var(--spectrum-global-dimension-size-125) !important;\n                    }\n\n                    @media only screen and (min-width: ${TABLET_SCREEN_WIDTH}) {\n                      left: var(--spectrum-global-dimension-size-250) !important;\n                    }\n                  `}\n                >\n                  <span\n                    css={css`\n                      text-align: left;\n                      cursor: pointer;\n                      margin-top: var(--spectrum-global-dimension-size-85);\n                      margin-left: var(--spectrum-global-dimension-size-400);\n\n                      @media only screen and (max-width: ${mobileMinWidth}) {\n                        margin-left: var(--spectrum-global-dimension-size-100) !important;;\n                      }\n\n                      @media only screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                        margin-left: var(--spectrum-global-dimension-size-100) !important;;\n                      }\n                    `}\n                  >\n                    <a\n                      href={APIReference}\n                      css={css`\n                        color: #4b9cf5;\n                      `}\n                      target={\"_blank\"}\n                      rel=\"noreferrer\"\n                    >\n                      API Reference\n                    </a>\n                  </span>\n                </div>\n              )}\n            </Tabs>\n          : null}\n          {menuItems?.length > 0 ?\n            menuItems.map((data, index) => {\n              const isHidden = selectedIndex.tab === index;\n              const contentData = data['content'];\n              contentData.props = {...contentData.props,index:selectedIndex.tab}\n              return(\n                <TabView\n                  key={`tabView_${index}`}\n                  id={`tabView${index}`}\n                  className={'tabView'}\n                  isHidden={!isHidden}\n                  css={css`\n                    text-align: left;\n                    padding: 0 0 var(--spectrum-global-dimension-size-100) 0 !important;\n                    max-width: ${layoutColumns(8.5)} !important;\n                    overflow-x: hidden !important;\n\n                    @media only screen and (max-width: ${mobileMinWidth}) {\n                      padding-left: inherit !important;\n                      max-width: ${layoutColumns(3)} !important;\n                    }\n\n                    @media only screen and (device-width: ${MOBILE_SCREEN_WIDTH}) {\n                      max-width: ${layoutColumns(3.5)} !important;\n                    }\n\n                    @media only screen and (device-width: ${TABLET_SCREEN_WIDTH}) {\n                      max-width: ${layoutColumns(6.5)} !important;\n                      padding-left:var(--spectrum-global-dimension-size-500);\n                    }\n\n                  `}\n                >\n                  { contentData }\n                </TabView>\n              )\n            })\n          : null}\n        </div>\n      </div>\n    </section>\n  )\n}\n\n\nTabs.propTypes = {\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  density: PropTypes.oneOf(['regular', 'compact']),\n  isQuiet: PropTypes.boolean,\n  className: PropTypes.string,\n};\n\nItem.propTypes = {\n  isSelected: PropTypes.boolean,\n  isDisabled: PropTypes.boolean,\n  className: PropTypes.string,\n  icon: PropTypes.element,\n  label: PropTypes.object\n};\n\nTabItemIcon.propTypes = {\n  elementType: PropTypes.string,\n  icon: PropTypes.element,\n  isSelected: PropTypes.boolean,\n  isDisabled: PropTypes.boolean,\n  iconSize: PropTypes.string,\n  className: PropTypes.string\n};\n\nTabView.propTypes = {\n  isHidden: PropTypes.boolean,\n  className: PropTypes.string\n};\n\nTabsBlock.propTypes = {\n  theme: PropTypes.oneOf(['light', 'dark', 'lightest']),\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  heading: PropTypes.string,\n  content: PropTypes.string,\n  image: PropTypes.string,\n  className: PropTypes.string,\n  APIReference: PropTypes.string,\n};\n\n\nexport { Tabs, Item, TabView, TabItemIcon, Label, TabsIndicator, positionIndicator, animateIndicator,CodeTabIndicator, TabsBlock };\n"],"sourceRoot":""}