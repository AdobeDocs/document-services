{"version":3,"sources":["webpack://dev-site-product-template/./src/@adobe/gatsby-theme-aio/components/Carousel/index.js"],"names":["SwiperCore","Autoplay","Pagination","Navigation","Texts","texts","index","slots","split","map","key","trim","filter","startsWith","data","SwiperContent","textKeys","heading","image","imageStyle","buttons","props","backgroundColor","slideTheme","theme","centerAlignament","isCenter","className","classNames","css","MOBILE_SCREEN_WIDTH","layoutColumns","TABLET_SCREEN_WIDTH","DESKTOP_SCREEN_WIDTH","styles","length","children","Carousel","swiperSpeed","delay","enableNavigation","varient","bulletActiveClass","bulletClass","navigationPre","navigationNext","carouselProps","Object","keys","bgimage","speed","slidesPerView","autoplay","pagination","clickable","navigation","nextEl","prevEl"],"mappings":"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","file":"3e68f330-0ec96d8d561f66ba5913.js","sourcesContent":["/*\n * Once Carousel PR will merged with Adobe theme after that we will remove this component\n */\n\nimport React from \"react\";\nimport { css } from \"@emotion/react\";\nimport \"@spectrum-css/typography\";\nimport PropTypes from \"prop-types\";\nimport {\n  TABLET_SCREEN_WIDTH,\n  layoutColumns,\n  MOBILE_SCREEN_WIDTH,\n  DESKTOP_SCREEN_WIDTH,\n} from \"@adobe/gatsby-theme-aio/src/utils\";\nimport {\n  HeroButtons,\n  HeroImage,\n} from \"@adobe/gatsby-theme-aio/src/components/Hero\";\n\nimport classNames from \"classnames\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport SwiperCore, { Pagination, Autoplay, Navigation } from \"swiper\";\nimport \"swiper/css\";\nimport \"swiper/css/pagination\";\nimport \"swiper/css/navigation\";\n\nSwiperCore.use([Autoplay, Pagination, Navigation]);\n\nconst Texts = ({ texts, index }) => {\n  const definedTextKeys = texts.slots\n    .split(',').map(key=>key.trim())\n    .filter((key) => key.startsWith('text'));\n  return definedTextKeys.map((data) => texts[`${data}${index}`]);\n};\n\n\nconst SwiperContent = ({\n  textKeys,\n  heading,\n  image,\n  imageStyle,\n  buttons,\n  props,\n  backgroundColor,\n  index,\n  slideTheme,\n  theme,\n  centerAlignament,\n  isCenter\n}) => {\n  return (\n    <div\n      className={classNames(`spectrum--${slideTheme ? slideTheme : theme}`)}\n      css={css`\n        display: flex;\n        ${backgroundColor}\n        margin-bottom: var(--spectrum-global-dimension-size-500);\n        flex-direction: row;\n        @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n          max-width: calc(${layoutColumns(3.5)}) !important;\n          // margin:0;\n        }\n        @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n          flex-direction: column;\n          max-width: calc(${layoutColumns(6)}) !important;\n\n        }\n      `}\n    >\n      {image ? (\n        <div\n          css={css`\n            flex: 1;\n            justify-content: center;\n            @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n              margin: auto;\n            }\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              max-width: calc(${layoutColumns(6)});\n              margin: 0;\n              margin-bottom: var(--spectrum-global-dimension-size-200);\n            }\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              margin: 0;\n              max-width: calc(${layoutColumns(3.5)}) !important;\n              margin-bottom: var(--spectrum-global-dimension-size-200);\n              // padding: var(--spectrum-global-dimension-size-0) !important;\n            }\n          `}\n        >\n           <h2>\n          <HeroImage image={image} styles={imageStyle} />\n           </h2>\n        </div>\n      ) : null}\n      {textKeys.length > 0 || heading || buttons ? (\n        <div\n          css={css`\n            text-align: left;\n            flex: 1;\n            padding: var(--spectrum-global-dimension-size-100);\n\n            @media only screen and (min-width: 375px) and(max-width:768px) {\n              margin: 0;\n              background:red;\n              text-align: center !important;\n              max-width: calc(${layoutColumns(3.5)}) !important;\n              padding-left:  var(--spectrum-global-dimension-size-100) !important;\n            }\n            ${isCenter&&centerAlignament}\n          `}\n        >\n          {heading && (\n            <h3\n              className=\"spectrum-Heading--sizeL\"\n              css={css`\n                @media only screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                  font-size: var(--spectrum-alias-heading-m-text-size) !important;\n                  // padding-left: var(--spectrum-global-dimension-size-100) !important;\n\n                }`\n              }>\n              {heading.props.children}\n            </h3>\n          )}\n          {textKeys.length > 0 ?\n            <div\n              className=\"textWrapper\"\n              css={css`\n                @media only screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                  &>h3{\n                    font-size: var(--spectrum-alias-heading-xxs-text-size) !important;\n                    \n                  }\n                }`\n              }\n            >\n              <Texts\n                texts={props}\n                index={index}\n              />\n            </div>\n          : null}\n          {buttons ? (\n            <div\n              css={css`\n                margin-top: var(--spectrum-global-dimension-size-200);\n                @media only screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                     div:first-child{\n                       justify-content:center !important;\n                     }\n                }\n              `}\n            >\n              <HeroButtons buttons={buttons} />\n            </div>\n          ):null}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nconst Carousel = ({\n  className,\n  theme = \"dark\",\n  imageStyle = {},\n  swiperSpeed = 600,\n  delay = 2500,\n  enableNavigation = false,\n  varient=\"default\",\n  slideTheme,\n  bulletActiveClass = \"swiper-pagination-bullet-active\",\n  bulletClass = \"swiper-pagination-bullet\",\n  navigationPre= \"swiper-button-prev\",\n  navigationNext = \"swiper-button-next\" ,\n  isCenter=false,\n  ...props\n}) => {\n  const propKeys = Object.keys(props);\n  let carouselProps = propKeys.filter((key) => key.startsWith(\"image\"));\n\n  carouselProps = carouselProps.map((data, index) => {\n    return {\n      image: props[data],\n      heading: props[`heading${index}`],\n      buttons: props[`buttons${index}`],\n      bgimage:props[`bgimage${index}`]\n    };\n  });\n\n  const textKeys = props.slots.split(\",\").filter((key) => key.trim().startsWith(\"text\"));\n\n  const backgroundColor = `background-color: var(--spectrum-global-color-gray-${\n    slideTheme === \"light\" ? \"50\" : \"\"\n  });`;\n if (varient===\"default\"){\n  return (\n    <section\n      className={classNames(className, `spectrum--${theme}`)}\n      css={css`\n        background: var(--spectrum-global-color-gray-100);\n        padding: var(--spectrum-global-dimension-size-600) 0\n          var(--spectrum-global-dimension-size-200) 0;\n      `}\n    >\n      <div\n        css={css`\n          max-width: calc(${layoutColumns(12)});\n          margin: auto;\n          @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n            max-width: calc(${layoutColumns(3)});\n          }\n          @media screen and (min-width: ${MOBILE_SCREEN_WIDTH})  and (max-width: ${TABLET_SCREEN_WIDTH})  {\n            padding-bottom: 0;\n            margin-top: 0;\n            max-width: calc(${layoutColumns(6)});\n          }\n        `}\n      >\n        <Swiper\n          speed={swiperSpeed}\n          slidesPerView={\"auto\"}\n          autoplay={{\n            delay,\n          }}\n          pagination={{\n            bulletActiveClass,\n            bulletClass,\n            clickable: true,\n          }}\n          navigation={{\n            nextEl: `.${navigationNext}`,\n            prevEl: `.${navigationPre}`,\n          }}\n        >\n          {carouselProps.map((data, index) => {\n            return (\n              <SwiperSlide key={index}>\n                <SwiperContent\n                  textKeys={textKeys}\n                  heading={data.heading}\n                  image={data.image}\n                  imageStyle={imageStyle}\n                  buttons={data.buttons}\n                  props={props}\n                  backgroundColor={backgroundColor}\n                  index={index}\n                  slideTheme={slideTheme}\n                  theme={theme}\n                />\n                {enableNavigation ? (\n                  <>\n                    <div className={navigationPre}></div>\n                    <div className={navigationNext} ></div>\n                  </>\n                ) : null}\n              </SwiperSlide>\n            );\n          })}\n        </Swiper>\n      </div>\n    </section>\n  );\n}else if( varient==='fullWidth'){\n  let centerAlignament= \"margin:auto\"\n  return(\n    <section\n      className={classNames(className, `spectrum--${theme}`)}\n      css={css`\n        background: var(--spectrum-global-color-gray-100);\n        padding: var(--spectrum-global-dimension-size-600) 0\n        var(--spectrum-global-dimension-size-200) 0;\n      `}\n    >\n      <Swiper\n        speed={swiperSpeed}\n        slidesPerView={\"auto\"}\n        autoplay={{\n          delay,\n        }}\n        pagination={{\n          bulletActiveClass,\n          bulletClass,\n          clickable: true,\n        }}\n        navigation={{\n          nextEl: `.${navigationNext}`,\n          prevEl: `.${navigationPre}`,\n        }}\n      >\n        {carouselProps.map((data, index) => {\n          return (\n            <SwiperSlide key={index}  >\n              <div className={data.bgimage.props?.children}>\n                <div\n                  css={css`\n                  max-width: calc(${layoutColumns(12)});\n                  margin: auto;\n                  @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                    width:auto;\n                    // max-width: calc(${layoutColumns(3)});\n                    // background:green;\n                  }\n                  @media screen and (min-width: ${MOBILE_SCREEN_WIDTH})  and (max-width: ${TABLET_SCREEN_WIDTH})  {\n                    // padding-bottom: 0;\n                    // margin-top: 0;\n                    max-width: calc(${layoutColumns(6)});\n                }\n                `}>\n                  <SwiperContent\n                    textKeys={textKeys}\n                    heading={data.heading}\n                    image={data.image}\n                    imageStyle={imageStyle}\n                    buttons={data.buttons}\n                    props={props}\n                    backgroundColor={backgroundColor}\n                    index={index}\n                    slideTheme={slideTheme}\n                    theme={theme}\n                    isCenter={isCenter}\n                    centerAlignament={centerAlignament}\n                  />\n                  {enableNavigation ? (\n                    <>\n                      <div className={navigationPre}></div>\n                      <div className={navigationNext} ></div>\n                    </>\n                  ) : null}\n                </div>\n              </div>\n            </SwiperSlide>\n          );\n        })}\n      </Swiper>\n    </section>\n  )}\n};\n\nCarousel.propTypes = {\n  className: PropTypes.string,\n  theme: PropTypes.oneOf([\"light\", \"dark\", \"lightest\"]),\n  imageStyle: PropTypes.string,\n  swiperSpeed: PropTypes.number,\n  delay: PropTypes.number,\n  enableNavigation: PropTypes.bool,\n  slideTheme: PropTypes.oneOf([\"light\", \"dark\"]),\n  bulletActiveClass: PropTypes.string,\n  bulletClass: PropTypes.string,\n  navigationNext:PropTypes.string,\n  navigationPre:PropTypes.string,\n  isCenter:PropTypes.bool\n};\n\nexport { Carousel };"],"sourceRoot":""}