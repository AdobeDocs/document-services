{"version":3,"file":"03d90930-d46fa04dfaf0bf7fab28.js","mappings":"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","sources":["webpack://dev-site-product-template/./src/@adobe/gatsby-theme-aio/components/Hero/index.js"],"sourcesContent":["\nimport React, { cloneElement, Children, useContext } from \"react\";\nimport { withPrefix } from \"gatsby\";\nimport { css } from \"@emotion/react\";\nimport { AnchorButton } from \"@adobe/gatsby-theme-aio/src/components/AnchorButton\";\nimport \"@spectrum-css/typography\";\nimport PropTypes from \"prop-types\";\nimport {\n  getElementChild,\n  cloneChildren,\n  TABLET_SCREEN_WIDTH,\n  MOBILE_SCREEN_WIDTH,\n  DEFAULT_HOME,\n  findSelectedTopPage,\n  rootFixPages,\n  rootFix,\n  findSelectedTopPageMenu,\n} from \"@adobe/gatsby-theme-aio/src/utils\";\nimport Context from \"@adobe/gatsby-theme-aio/src/components/Context\";\nimport { Breadcrumbs } from \"@adobe/gatsby-theme-aio/src/components/Breadcrumbs\";\nimport classNames from \"classnames\";\n\nimport { DESKTOP_SCREEN_WIDTH } from \"../../../../utils\";\nimport AnimationVideo from \"../../../../pages/videos/Adobe_DCP_Marquee_Animation.json\";\nimport Lottie from 'react-lottie';\n\nconst setImageLoading = (child) => {\n  if (child?.props?.mdxType === 'img') {\n    return cloneElement(child, {\n      loading: 'eager'\n    });\n  }\n\n  return child;\n};\n\nconst getAriaLabel = (label, heading='') => {\n  const labelVal = label === 'Learn more' && heading !=='' ? `${label} about ${heading}` : `${label}`;\n  return labelVal;\n}\n\nconst HeroButtons = ({ buttons, variants = ['cta', 'primary'], quiets = [true, true], className, heading='' }) =>\n  buttons ? (\n    <div>\n      <div\n        className={className}\n        css={css`\n          display: flex;\n          flex-wrap: wrap;\n          gap: var(--spectrum-global-dimension-size-200);\n        `}>\n        {Children.map(buttons.props.children, (item, i) => {\n          let variant = variants[0];\n          let quiet = quiets[0];\n\n          if (i > 0) {\n            variant = variants[1];\n            quiet = quiets[1];\n          }\n\n          const link = getElementChild(item);\n\n          return (\n            <div key={i}>\n              <AnchorButton aria-label={getAriaLabel(link.props.children, heading)} isQuiet={quiet} href={link.props.href} variant={variant}>\n                {link.props.children}\n              </AnchorButton>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  ) : null;\n\nconst HeroImage = ({ image, styles }) =>\n  image\n    ? cloneElement(image, {\n      children: cloneChildren(image.props.children, setImageLoading),\n      css: css`\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          height: 100%;\n          width: 100%;\n          margin-top: 0;\n          ${styles}\n\n          .gatsby-resp-image-wrapper {\n            max-width: none !important;\n            width: 100% !important;\n            height: 100% !important;\n          }\n\n          .gatsby-resp-image-image {\n            object-fit: cover;\n          }\n        `\n    })\n    : null;\n\nconst HeroTexts = ({ texts }) => {\n  const textKeys = Object.keys(texts).filter((key) => key.startsWith('text'));\n  return textKeys.map((textKey) =>\n    cloneElement(texts[textKey], {\n      className: 'spectrum-Body spectrum-Body--sizeL',\n      css: css`\n        &.spectrum-Body--sizeL {\n          margin-top: 0 !important;\n          color:#fff !important;\n\n          &:last-of-type {\n            margin-bottom: 0 !important;\n          }\n        }\n\n        @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n          padding: 0 var(--spectrum-global-dimension-size-115);\n        }\n      `\n    })\n  );\n};\n\nconst HeroHeading = ({ heading, variant, customLayout }) =>\n  heading\n    ? cloneElement(heading, {\n      // force h1 to support gdocs\n      mdxType: 'h1',\n      originalType: 'h1',\n      className:\n        (variant === 'default' || customLayout) ? customLayout ? 'spectrum-Heading--sizeXL spectrum-Heading--serif' : 'spectrum-Heading--sizeXL' : 'spectrum-Heading--sizeXXL spectrum-Heading--serif',\n      css: css`\n          margin-top: 0;\n          margin-bottom: var(--spectrum-global-dimension-size-200);\n\n          & + p {\n            margin-bottom: var(--spectrum-global-dimension-size-200);\n          }\n        `\n    })\n    : null;\n\nconst Hero = ({\n  className,\n  background,\n  theme = 'dark',\n  heading,\n  image,\n  icon,\n  buttons,\n  assetsImg,\n  variant = 'default',\n  containerHeight = 1000,\n  width = DESKTOP_SCREEN_WIDTH,\n  customLayout = false,\n  ...props\n}) => {\n  const { siteMetadata, location } = useContext(Context);\n  if (!variant || variant === 'default') {\n    const { home, pages } = siteMetadata;\n    const pathWithRootFix = rootFix(location.pathname);\n    const pagesWithRootFix = rootFixPages(pages);\n    const selectedTopPage = findSelectedTopPage(pathWithRootFix, pagesWithRootFix);\n    const selectedTopPageMenu = findSelectedTopPageMenu(pathWithRootFix, selectedTopPage);\n\n    return (\n      <section\n        className={classNames(className, `spectrum--${theme}`)}\n        css={css`\n          position: relative;\n          height: var(--spectrum-global-dimension-size-3400);\n          margin-bottom: var(--spectrum-global-dimension-size-400);\n          background-color: ${background ?? 'rgb( 29, 125, 238)'};\n          width: 100%;\n          display: flex;\n\n          @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n            overflow: auto;\n          }\n\n          @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n            height: calc(100vh - var(--spectrum-global-dimension-size-1200));\n          }\n        `}>\n        <HeroImage image={image} styles={`position: absolute;`} />\n        <div\n          css={css`\n            margin: auto;\n            display: flex;\n            position: relative;\n            height: 100%;\n            max-width: ${width};\n            flex-direction: row;\n            width: 100%;\n            align-items: center;\n\n            & > p {\n              margin-top: 0 !important;\n            }\n          `}>\n          <div\n            css={css`\n              width: calc(5 * 100% / 12);\n              position: absolute;\n              display: flex;\n              flex-direction: column;\n\n              & > p {\n                margin-top: var(--spectrum-global-dimension-size-225) !important;\n                margin-bottom: 0 !important;\n              }\n\n              @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n                width: auto;\n                padding: 0 var(--spectrum-global-dimension-size-400);\n              }\n            `}>\n            {home?.hidden !== true && home?.title && home?.href && selectedTopPage && (\n              <Breadcrumbs\n                pages={[\n                  DEFAULT_HOME,\n                  home,\n                  { ...selectedTopPage, href: withPrefix(selectedTopPage.href) },\n                  selectedTopPageMenu && { ...selectedTopPageMenu, href: withPrefix(selectedTopPageMenu.href) }\n                ]}\n              />\n            )}\n\n            <HeroHeading heading={heading} variant={variant} />\n\n            <HeroTexts texts={props} />\n          </div>\n        </div>\n      </section>\n    );\n  } else {\n    const height = 'calc(var(--spectrum-global-dimension-size-6000) + var(--spectrum-global-dimension-size-1800))';\n    if (variant === 'fullwidth' && customLayout) {\n      return (\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            width: 100%;\n            background: ${background ?? \"var(--spectrum-global-color-gray-50)\"};\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              overflow: auto;\n            }\n\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              .spectrum-Heading--sizeXL {\n                font-size: var(--spectrum-alias-heading-l-text-size);\n              }\n            }\n          `}\n        >\n          <HeroImage image={image} />\n\n          <div\n            css={css`\n              height: 100%;\n              top: 0;\n              bottom: 0;\n              width: 100%;\n              box-sizing: border-box;\n              padding: 0;\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n              justify-content: flex-end;\n              text-align: center;\n\n              h1 {\n                padding: var(--spectrum-global-dimension-size-500) var(--spectrum-global-dimension-size-300) var(--spectrum-global-dimension-size-0) !important;\n              }\n\n              @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                padding: 0 !important;\n              }\n\n              @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                padding: 0 var(--spectrum-global-dimension-size-250);\n\n                h1 {\n                  padding: var(--spectrum-global-dimension-size-400) var(--spectrum-global-dimension-size-200) var(--spectrum-global-dimension-size-0) !important;\n                }\n              }\n            `}\n          >\n            {heading && (\n              <HeroHeading\n                heading={heading}\n                variant={variant}\n                customLayout={customLayout}\n              />\n            )}\n\n            <HeroTexts texts={props} />\n\n            {buttons ? (\n              <HeroButtons\n                buttons={buttons}\n                variants={[\"cta\", \"overBackground\"]}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-200);\n                  margin-bottom: var(--spectrum-global-dimension-size-200);\n                `}\n              />\n            ) : (\n              <div\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-200);\n                `}\n              />\n            )}\n            <div className={assetsImg?.props?.children}/>\n          </div>\n        </section>\n      )\n    } else if(variant === 'video' && AnimationVideo){\n      return (\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n            width: 100%;\n            overflow: hidden;\n            height: auto;\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-400);\n              box-sizing: border-box;\n            }\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-400);\n              box-sizing: border-box;\n            }\n          `}>\n            <div css={css`\n              @media screen and (min-width: ${DESKTOP_SCREEN_WIDTH}) {\n                position: relative;\n                max-width:${DESKTOP_SCREEN_WIDTH}\n                margin:auto;\n              }\n            `}>\n              <div css={css`\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  display: none;\n                }\n              `}>\n                <Lottie\n                  options={ {\n                    loop: true,\n                    autoplay: true,\n                    animationData: AnimationVideo,\n                    rendererSettings: {\n                      preserveAspectRatio: 'xMidYMid slice'\n                    }\n                  }}\n                  isStopped={false}\n                  isPaused={false}/>\n              </div>\n\n              <div\n                css={css`\n                  display: flex;\n                  height: 100%;\n                  max-width: ${width};\n                  margin: auto;\n                  @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                    display: inline;\n                  }\n              `}>\n                <div\n                  css={css`\n                    display: flex;\n                    flex-direction: column;\n                    justify-content: center !important;\n                    position: absolute;\n                    padding: 0;\n                    top: 0;\n                    text-align: left;\n                    width: 30%;\n                    align-item:center;\n                    bottom: 0;\n                    box-sizing: border-box;\n\n                    @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                      padding: 0 !important;\n                      width: 100% !important;\n                      position: initial !important;\n                    }\n\n                    @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                      padding: 0 var(--spectrum-global-dimension-size-100);\n                      width:100% !important;\n                      top: 20px !important;\n                      position: initial !important;\n                      h1 {\n                        padding: 0 var(--spectrum-global-dimension-size-200) 0 var(--spectrum-global-dimension-size-0) !important;\n                        font-size: var(--spectrum-heading-l-text-size, var(--spectrum-alias-heading-l-text-size))\n                      }\n                    }\n                `}>\n\n                  {heading && (\n                    <HeroHeading\n                      heading={heading}\n                      variant={variant}\n                      customLayout={customLayout}\n                    />\n                  )}\n\n                  <HeroTexts texts={props} />\n\n                  <HeroButtons\n                    buttons={buttons}\n                    quiets={[false]}\n                    variants={[\"primary\", \"overBackground\"]}\n                    css={css`\n                      margin-top: var(--spectrum-global-dimension-size-400);\n                    `}\n                  />\n                </div>\n                <div\n                  css={css`\n                    max-width: ${width};\n                    margin: auto;\n                    display: none;\n                    @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                      display: block;\n                    }\n                    @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                      display: inline;\n                    }\n                `}>\n                <div className={assetsImg?.props?.children}/>\n              </div>\n            </div>\n          </div>\n        </section>\n      );\n    } else if (variant === 'halfwidth' && customLayout ) {\n      return (\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n            width: 100%;\n            overflow: hidden;\n            height: auto;\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-400);\n              box-sizing: border-box;\n            }\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-400);\n              box-sizing: border-box;\n            }\n        `}>\n          <div css={css`\n            @media screen and (min-width: ${DESKTOP_SCREEN_WIDTH}) {\n              display: flex;\n              justify-content: space-between;\n              position: relative;\n              max-width:${DESKTOP_SCREEN_WIDTH};\n              margin:auto;\n            }\n          `}>            \n            <div\n              css={css`\n                display: flex;\n                flex-direction: column;\n                justify-content: center !important;\n                // position: absolute;\n                padding: 0;\n                top: 0;\n                text-align: left;\n                width: 36%;\n                align-item:center;\n                bottom: 0;\n                box-sizing: border-box;\n\n                @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                  padding: 0 !important;\n                  width: 100% !important;\n                  position: initial !important;\n                }\n\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  padding: 0;\n                  width:100% !important;\n                  top: 20px !important;\n                  position: initial !important;\n                  h1 {\n                    padding: 0 var(--spectrum-global-dimension-size-200) 0 var(--spectrum-global-dimension-size-0) !important;\n                    font-size: var(--spectrum-heading-l-text-size, var(--spectrum-alias-heading-l-text-size))\n                  }\n                }\n            `}>                    \n                {heading && (\n                  <HeroHeading\n                    heading={heading}\n                    variant={variant}\n                    customLayout={customLayout}\n                  />\n                )}\n\n              <HeroTexts texts={props} />\n\n              <HeroButtons\n                buttons={buttons}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-400);\n                `}\n              />\n            </div>\n            <div>\n              <div className={assetsImg?.props?.children}/>\n            </div>\n          </div>\n        </section>\n      );\n    } else if (variant === 'fullwidth') {\n      return (\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            position: relative;\n            width: 100%;\n            height: ${height};\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              overflow: auto;\n            }\n\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              height: 100vh;\n\n              .spectrum-Heading--sizeXXL {\n                font-size: var(--spectrum-alias-heading-xl-text-size);\n              }\n            }\n          `}>\n          <HeroImage image={image} />\n\n          <div\n            css={css`\n              height: 100%;\n              position: absolute;\n              top: 0;\n              width: 100%;\n              box-sizing: border-box;\n              padding: 0 calc(var(--spectrum-global-dimension-size-3600) + var(--spectrum-global-dimension-size-125));\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n              justify-content: center;\n              text-align: center;\n\n              @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                padding: 0 var(--spectrum-global-dimension-size-400);\n              }\n            `}>\n            <HeroHeading heading={heading} variant={variant} />\n\n            <HeroTexts texts={props} />\n\n            <HeroButtons\n              buttons={buttons}\n              variants={['cta', 'overBackground']}\n              css={css`\n                margin-top: var(--spectrum-global-dimension-size-400);\n              `}\n            />\n            <div className={assetsImg?.props?.children}/>\n          </div>\n        </section>\n      );    \n    } else if (variant === 'halfwidth') {\n      return (\n        <section\n          className={classNames(className, `spectrum--lightest`)}\n          css={css`\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n            width: 100%;\n            height: ${height};\n            overflow: hidden;\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-400);\n              box-sizing: border-box;\n            }\n          `}>\n          <div\n            css={css`\n              display: flex;\n              height: 100%;\n              justify-content: center;\n            `}>\n            <div\n              css={css`\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                width: calc(5 * 100% / 12);\n                margin-left: var(--spectrum-global-dimension-size-800);\n                margin-right: var(--spectrum-global-dimension-size-400);\n\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  width: 100%;\n                  margin: 0;\n                }\n              `}>\n              {icon &&\n                cloneElement(icon, {\n                  children: cloneChildren(icon.props.children, setImageLoading),\n                  css: css`\n                    height: var(--spectrum-global-dimension-size-600);\n                    width: var(--spectrum-global-dimension-size-600);\n                    margin-top: 0 !important;\n                    margin-bottom: var(--spectrum-global-dimension-size-300) !important;\n\n                    .gatsby-resp-image-wrapper {\n                      max-width: none !important;\n                      width: 100% !important;\n                      height: 100% !important;\n                    }\n\n                    .gatsby-resp-image-image {\n                      height: 100%;\n                      object-fit: contain;\n                    }\n                  `\n                })}\n\n              <HeroHeading heading={heading} isVariant />\n\n              <HeroTexts texts={props} />\n\n              <HeroButtons\n                buttons={buttons}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-400);\n                `}\n              />\n            </div>\n            <div\n              css={css`\n                flex: 1;\n\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  display: none;\n                }\n              `}>\n              <HeroImage image={image} />\n            </div>\n          </div>\n        </section>\n      );\n    }\n  }\n};\n\nHero.propTypes = {\n  background: PropTypes.string,\n  heading: PropTypes.element,\n  text: PropTypes.element,\n  image: PropTypes.element,\n  icon: PropTypes.element,\n  buttons: PropTypes.element,\n  variant: PropTypes.string,\n  width: PropTypes.string,\n  theme: PropTypes.string,\n  customLayout: PropTypes.bool,\n  assetsImg:PropTypes.element,\n};\n\nHeroButtons.propTypes = {\n  buttons: PropTypes.element,\n  variants: PropTypes.array,\n  quiets: PropTypes.array\n};\n\nHeroImage.propTypes = {\n  image: PropTypes.element\n};\n\nexport { Hero, HeroImage, HeroButtons };\n"],"names":["setImageLoading","child","props","mdxType","cloneElement","loading","getAriaLabel","label","heading","HeroButtons","buttons","variants","quiets","className","css","Children","children","item","i","variant","quiet","link","getElementChild","key","A","isQuiet","href","HeroImage","image","styles","cloneChildren","HeroTexts","texts","Object","keys","filter","startsWith","map","textKey","MOBILE_SCREEN_WIDTH","HeroHeading","customLayout","originalType","Hero","background","theme","icon","assetsImg","containerHeight","width","DESKTOP_SCREEN_WIDTH","useContext","Context","siteMetadata","location","home","pages","pathWithRootFix","rootFix","pathname","pagesWithRootFix","rootFixPages","selectedTopPage","findSelectedTopPage","selectedTopPageMenu","findSelectedTopPageMenu","classNames","hidden","title","DEFAULT_HOME","withPrefix","height","TABLET_SCREEN_WIDTH","AnimationVideo","options","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","isStopped","isPaused","isVariant"],"sourceRoot":""}